##
# Usage: Setup Cron Restrictions
#
# Initially written by a Tired Matthew Harper
##

---
- name: Set timestamp variable
  set_fact:
    backup_timestamp: "{{ ansible_date_time.iso8601 }}"
- name: Target Host Facts
  ansible.builtin.setup:

- name: Find User Home Directories
  ansible.builtin.command: "ls /home/"
  register: home_dirs

- name: Create Backup Directory
  ansible.builtin.file:
    path: /backups
    state: directory
    owner: root
    group: root
    mode: u=rwx,g=,o=

- name: Find History Files
  ansible.builtin.find:
    paths: /home
    recurse: yes
    depth: 2
    hidden: true
    use_regex: true
    pattern: '.*_history, .*history'
    file_type: file
  register: history_files

- name: Create History Backup Directory
  ansible.builtin.file:
    path: /backups/user-histories
    state: directory
    owner: root
    group: root
    mode: u=rwx,g=,o=

- name: Create User History Backup Directory
  ansible.builtin.file:
    path: /backups/users/{{ item }}
    state: directory
    owner: root
    group: root
    mode: u=rwx,g=,o=
  with_items:
    - "{{ home_dirs.stdout_lines }}"

- name: Backup User Shell Histories
  ansible.builtin.copy:
    src: "{{ item.path }}"
    dest: /backups/users/{{ item.pw_name }}/{{ item.path.split('/')[-1] }}
    remote_src: true
  with_items: "{{ history_files.files }}"

- name: Backup User Authorized Keys
  ansible.builtin.copy:
    src: /home/{{ item }}/.ssh/authorized_keys
    dest: /backups/users/{{ item }}/authorized_keys
    remote_src: true
    owner: root
    group: root
    mode: u=rwx,g=,o=
  with_items: "{{ home_dirs.stdout_lines }}"

- name: Create SSHD Backup Directory
  ansible.builtin.file:
    path: /backups/ssh
    state: directory
    owner: root
    group: root
    mode: u=rwx,g=,o=

- name: Backup SSH Directory
  ansible.builtin.copy:
    remote_src: true
    src: /etc/ssh/
    dest: /backups/ssh
    owner: root
    group: root
    mode: u=rwx,g=,o=

- name: Create PAM Backup Directory
  ansible.builtin.file:
    path: /backups/pam/pam.d
    state: directory
    owner: root
    group: root
    mode: u=rwx,g=,o=

- name: Backup PAM Directory
  ansible.builtin.copy:
    remote_src: true
    src: /etc/{{ item }}
    dest: /backups/pam/{{ item }}
    owner: root
    group: root
    mode: u=rwx,g=,o=
  with_items:
    - pam.d
    - pam.conf

- name: Create Cron Backup Directory
  ansible.builtin.file:
    path: /backups/cron
    state: directory
    owner: root
    group: root
    mode: u=rwx,g=,o=

- name: Create Etc Backup Directory
  ansible.builtin.file:
    path: /backups/etc
    state: directory
    owner: root
    group: root
    mode: u=rwx,g=,o=

- name: Backup Redhat Cron
  ansible.builtin.copy:
    remote_src: true
    src: /var/spool/cron/
    dest: /backups/cron
    owner: root
    group: root
    mode: u=rwx,g=,o=
  when: ansible_facts['os_family'] == 'RedHat'

- name: Backup Debian Cron
  ansible.builtin.copy:
    remote_src: true
    src: /var/spool/cron/crontabs
    dest: /backups/cron
    owner: root
    group: root
    mode: u=rwx,g=,o=
  when: ansible_facts['os_family'] == 'Debian'

- name: Backup Other Cron
  ansible.builtin.copy:
    remote_src: true
    src: /var/spool/cron/crontabs
    dest: /backups/cron
    owner: root
    group: root
    mode: u=rwx,g=,o=
  when: not ansible_facts['os_family'] == 'Debian' and not ansible_facts['os_family'] == 'RedHat'

- name: Create Log Backup Directory
  ansible.builtin.file:
    path: /backups/log
    state: directory
    owner: root
    group: root
    mode: u=rwx,g=,o=

- name: Backup Logs
  ansible.builtin.copy:
    remote_src: true
    src: /var/log
    dest: /backups/log
    owner: root
    group: root
    mode: u=rwx,g=,o=

- name: Backup Passwd and Group Files
  ansible.builtin.copy:
    remote_src: true
    src: /etc/{{ item }}
    dest: /backups/{{ item }}
    owner: root
    group: root
    mode: u=rw,g=r,o=r
  with_items:
    - passwd
    - group
  
- name: Backup Full Etc Directory
  ansible.builtin.copy:
    remote_src: true
    src: /etc
    dest: /backups/etc
    owner: root
    group: root
    mode: u=rwx,g=,o=

- name: Check www Exists
  ansible.builtin.stat:
    path: /var/www
  register: www_dir

- name: Create www Backup Directory
  ansible.builtin.file:
    path: /backups/www
    state: directory
    owner: root
    group: root
    mode: u=rwx,g=,o=
  when: www_dir.stat.exists

- name: Backup www Directory
  ansible.builtin.copy:
    remote_src: true
    src: /var/www
    dest: /backups/www
    owner: root
    group: root
    mode: u=rwx,g=,o=
  when: www_dir.stat.exists

- name: Create Mail Backup Directory
  ansible.builtin.file:
    path: /backups/mail
    state: directory
    owner: root
    group: root
    mode: u=rwx,g=,o=
  ignore_errors: true

- name: Find Mail Directories
  ansible.builtin.find:
    paths: "{{ item }}"
    recurse: yes
  register: mail_files
  with_items:
    - /etc/postfix/
    - /var/spool/postfix/
    - /var/log/maillog
    - /var/log/mail.log
    - /etc/exim/
    - /etc/exim4/
    - /var/spool/exim/
    - /var/log/exim4/
    - /etc/mail/
    - /var/spool/mqueue/
    - /var/log/maillog
    - /etc/dovecot/
    - /var/mail/
    - /var/log/dovecot.log
    - /etc/courier/
  ignore_errors: true

- name: Backup Mail Directories
  ansible.builtin.copy:
    remote_src: yes
    src: "{{ item.path }}"
    dest: "/backups/mail{{ item.path }}"
  with_items: "{{ mail_files.results | map(attribute='files') | list | flatten(levels=1) }}"
  ignore_errors: true

- name: Tar and Zip Backups Directory
  ansible.builtin.command:
    cmd: tar -czf /tmp/{{ backup_timestamp }}.tar.gz /backups

- name: Create Backups Directory On Controller
  ansible.builtin.file:
    path: "{{ playbook_dir }}/backups/{{ ansible_hostname }}/{{ backup_timestamp }}"
    state: directory
  delegate_to: localhost
  become: false

- name: Fetch Tarball
  ansible.builtin.fetch:
    src: "/tmp/{{ backup_timestamp }}.tar.gz"
    dest: "{{ playbook_dir }}/backups/{{ ansible_hostname }}/{{ backup_timestamp }}.tar.gz"
    flat: yes

- name: Delete Tarball
  ansible.builtin.file:
    path: /tmp/{{ backup_timestamp }}.tar.gz
    state: absent

- name: Unzip Backups 
  ansible.builtin.command:
    cmd: tar -xzf {{ playbook_dir }}/backups/{{ ansible_hostname }}/{{ backup_timestamp }}.tar.gz -C {{ playbook_dir}}/backups/{{ ansible_hostname }}/{{ backup_timestamp }}
  delegate_to: localhost
  become: false 
# May want to add Firewall backups later
